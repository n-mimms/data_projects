colnames(winning_cnxn) <- c("notice_id","buyer","buyer_id","bid_value","supplier")
winning_cnxn <- unique(winning_cnxn)
write.csv(winning_cnxn,
file = "C:/Users/nickp/.Neo4jDesktop/neo4jDatabases/database-aea3a8ec-6ff2-4a3c-9b7a-617a08845af3/installation-4.0.3/import/connection_wins.csv", row.names=FALSE)
connection_win <- left_join(winning_cnxn, supplier_df, by = c("supplier"))
write.csv(connection_win,
file = "C:/Users/nickp/.Neo4jDesktop/neo4jDatabases/database-aea3a8ec-6ff2-4a3c-9b7a-617a08845af3/installation-4.0.3/import/connection_wins.csv", row.names=FALSE)
write.csv(connection_lose,
file = "C:/Users/nickp/.Neo4jDesktop/neo4jDatabases/database-aea3a8ec-6ff2-4a3c-9b7a-617a08845af3/installation-4.0.3/import/connection_loss.csv", row.names=FALSE)
connection_lose <- left_join(losing_cnxn, supplier_df, by = c("supplier"))
losing_cnxn <- df3 %>% select("Notis ID", "Upphandlande myndighet", "Organisationsnummer upphandlande myndighet",
"losing_bid_value", "other_bidders_clean")
colnames(losing_cnxn) <- c("notice_id","buyer","buyer_id","bid_value","supplier")
connection_lose <- left_join(losing_cnxn, supplier_df, by = c("supplier"))
write.csv(connection_lose,
file = "C:/Users/nickp/.Neo4jDesktop/neo4jDatabases/database-aea3a8ec-6ff2-4a3c-9b7a-617a08845af3/installation-4.0.3/import/connection_loss.csv", row.names=FALSE)
MATCH ()-[r:BID]->() DELETE r;
library(RWordPress)
library(knitr)
options(WordPressLogin = c(wordpress_login = 'Pachelbel3'),
WordPressURL = 'https://nmimms.com/xmlrpc.php')
#publish your work
knit2wp('wordpress_test.Rmd', title = 'Test Publish',publish = T)
#log into your wordpress account
options(WordPressLogin = c(wordpress_login = 'Pachelbel3'),
WordPressURL = 'https://nmimms.com/xmlrpc.php')
#publish your work
knit2wp('wordpress_test.Rmd', title = 'Test Publish',publish = T)
#log into your wordpress account
options(WordPressLogin = c(wordpress_login = 'Pachelbel3'),
WordPressURL = 'https://nmimms.com')
#publish your work
knit2wp('wordpress_test.Rmd', title = 'Test Publish',publish = T)
options(WordPressLogin = c(wordpress_login = 'Pachelbel3'),
WordPressURL = 'https://hjelpreda.wordpress.com/xmlrpc.php')
#publish your work
knit2wp('wordpress_test.Rmd', title = 'Test Publish',publish = F)
#log into your wordpress account
options(WordPressLogin = c(wordpress_login = 'Pachelbel3'),
WordPressURL = 'https://hjelpreda.wordpress.com/xmlrpc.php')
#publish your work
knit2wp('wordpress_test.Rmd', title = 'Test Publish',publish = F)
options(WordpressLogin = c(user = 'Pachelbel3'),
WordpressURL = 'https://hjelpreda.wordpress.com/xmlrpc.php')
#publish your work
knit2wp('wordpress_test.Rmd', title = 'Test Publish',publish = F)
options(WordpressLogin = c(lillegubbe = 'Pachelbel3'),
WordpressURL = 'https://hjelpreda.wordpress.com/xmlrpc.php')
#publish your work
knit2wp('wordpress_test.Rmd', title = 'Test Publish',publish = F)
#publish your work
knit2wp('wordpress_test.Rmd', title = 'Test Publish',publish = T)
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
plot(pressure)
#log into your wordpress account
options(WordpressLogin = c(lillegubbe = 'Pachelbel3'),
WordpressURL = 'https://hjelpreda.wordpress.com/xmlrpc.php')
#publish your work
knit2wp('wordpress_test.Rmd', title = 'Test Publish',publish = T)
ggplot2::ggplot(pressure)
plot(pressure)
ggplot2::ggplot(pressure, aes(x=temperature))
library(ggplot)
library(ggplot2)
ggplot(pressure, aes(x=temperature))
plot(pressure)
ggplot(pressure, aes(x=temperature, y = pressure))
ggplot(pressure, aes(x=temperature, y = pressure)) + geom_point()
#publish your work
knit2wp('wordpress_test.Rmd', title = 'Test Publish',publish = T)
#plot(pressure)
ggplot(mtcars, aes(wt, mpg, color = cyl)) + geom_point()
#publish your work
knit2wp('wordpress_test.Rmd', title = 'Test Publish',publish = T)
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(upload.fun = function(file){uploadFile(file)$url})
library(ggplot2)
#plot(pressure)
ggplot(mtcars, aes(wt, mpg, color = cyl)) + geom_point()
#plot(pressure)
ggplot(mtcars, aes(wt, mpg, color = cyl)) + geom_point()
opts_knit$set(upload.fun = function(file){uploadFile(file)$url})
library(knitr)
library(RWordPress)
#if (!require('RWordPress')) {
#  devtools::install_github(c("duncantl/XMLRPC", "duncantl/RWordPress"))
#}
opts_knit$set(upload.fun = function(file){uploadFile(file)$url})
#log into your wordpress account
options(WordpressLogin = c(lillegubbe = 'Pachelbel3'),
WordpressURL = 'https://hjelpreda.wordpress.com/xmlrpc.php')
#publish your work
knit2wp('wordpress_test.Rmd', title = 'Test Publish',publish = T)
library(RWordPress)
library(knitr)
#if (!require('RWordPress')) {
#  devtools::install_github(c("duncantl/XMLRPC", "duncantl/RWordPress"))
#}
opts_knit$set(upload.fun = function(file){uploadFile(file)$url})
#log into your wordpress account
options(WordpressLogin = c(lillegubbe = 'Pachelbel3'),
categories = c('Old Recipes'),
WordpressURL = 'https://nmimms.com/xmlrpc.php')
#publish your work
knit2wp('wordpress_test.Rmd', title = 'Test Publish2',publish = T)
#publish your work
knit2wp('wordpress_test.Rmd',
title = 'Test Publish3',
publish = T,
categories = c('Old Recipes'))
#publish your work
knit2wp('wordpress_test.Rmd',
title = 'Test Publish4',
publish = T,
categories = c('Old Recipes'))
#publish your work
knit2wp('wordpress_test.Rmd',
title = 'Test Publish5',
publish = T,
categories = 'Old Recipes')
# data wrangling
library(tidyverse)
# html parser
library(rvest)
# string stuff
library(stringr)
# pipes
library(magrittr)
#plots
library(ggplot2)
scraping_AR <- read_html("https://www.allrecipes.com/recipe/10331/moms-chocolate-chip-cookies/")
##Get ingredients:
recipe_data <- scraping_AR %>%
html_nodes('.ingredients-item') %>%
html_text() %>% trimws()
recipe_data
install.packages("utf8")
relevant_titles <- meta_search %>%
html_nodes(".fixed-recipe-card__h3")  %>%
html_text() %>% utf8::utf8_encode()
##Get ingredients:
recipe_data <- scraping_AR %>%
html_nodes('.ingredients-item') %>%
html_text() %>% trimws() %>% utf8::utf8_encode()
recipe_data
¾
¾ * 4
3/4 * 4
##Get ingredients:
recipe_data <- scraping_AR %>%
html_nodes('.ingredients-item') %>%
html_text() %>% trimws() %>% utf8::utf8_print()
##Get ingredients:
recipe_data <- scraping_AR %>%
html_nodes('.ingredients-item') %>%
html_text() %>% trimws()
meta_search <- read_html("https://www.allrecipes.com/search/results/?wt=chocolate%20chip%20cookies&sort=re")
#https://www.allrecipes.com/search/results/?wt=chocolate%20chip%20cookies&sort=re&page=2   #Url for second page of search
relevant_titles <- meta_search %>%
html_nodes(".fixed-recipe-card__h3")  %>%
html_text()
relevant_urls <- meta_search %>%
html_nodes(".fixed-recipe-card__h3") %>%
html_nodes("a") %>% html_attr("href")
title_and_url <- data.frame(relevant_titles, relevant_urls)
View(scraping_AR)
scraping_AR$node
scraping_AR[[3]]
scraping_AR[[2]
]
scraping_AR[[2]][2]
scraping_AR[[2]][[3]]
scraping_AR[[1]]
scraping_AR[[1][3]]
scraping_AR[[1]][[1]]
scraping_AR[[1]]
title_and_url
View(title_and_url)
relevant_titles <- meta_search %>%
html_nodes(".fixed-recipe-card__h3")  %>%
html_text() %>% trimws()
relevant_urls <- meta_search %>%
html_nodes(".fixed-recipe-card__h3") %>%
html_nodes("a") %>% html_attr("href") %>% trimws()
title_and_url <- data.frame(relevant_titles, relevant_urls)
title_and_url
#Given a vector of search terms, return (20*N) relevant recipe urls as a data frame:
relevant_url_finder <- function(searchTerms, N){
#Create the search url from given search terms:
#split the search terms by the separator used on AllRecipes
searched <- paste0(searchTerms, collapse = "%20")
#collect the N urls for the search pages
meta_urls <- vector(mode="character", length=N)
for (i in 1:N){
if (i ==1){
meta_urls[i] <- paste0("https://www.allrecipes.com/search/results/?wt=", searched, "&sort=re")
} else {
meta_urls[i] <- paste0("https://www.allrecipes.com/search/results/?wt=", searched, "&sort=re","&page=", i)
}
}
#For each of the N search pages, gather the 20 urls into a vector. each N page is a separate term in N-length list
#initialize a list to store the N results
url_vector_list <- vector(mode = "list", length = N)
#counter
nm <- 1
#loop over the search page (meta) urls, gathering all recipe urls from the search page
for (metaurl in meta_urls){
metascrape <- read_html(metaurl)
#store 20 recipe urls as the Nth item of the list
url_vector_list[[nm]] <- metascrape %>%
html_nodes(".fixed-recipe-card__h3") %>%
html_nodes("a") %>% html_attr("href")
#increase index
nm <- nm + 1
#sleep for a period
Sys.sleep(4)
}
#unlist the N 20-string long vectors and combine into a 20*N size vector of urls to relevant recipes
url_vector <- unlist(url_vector_list)
return(url_vector)
}
#Given a vector of search terms, return (20*N) relevant recipe urls as a data frame:
relevant_url_finder <- function(searchTerms, N){
#Create the search url from given search terms:
#split the search terms by the separator used on AllRecipes
searched <- paste0(searchTerms, collapse = "%20")
#collect the N urls for the search pages and store as a vector
meta_urls <- vector(mode="character", length=N)
for (i in 1:N){
if (i ==1){
meta_urls[i] <- paste0("https://www.allrecipes.com/search/results/?wt=", searched, "&sort=re")
} else {
meta_urls[i] <- paste0("https://www.allrecipes.com/search/results/?wt=", searched, "&sort=re","&page=", i)
}
}
#For each of the N search pages, gather the 20 urls into a vector. each N page is a separate term in N-length list
#initialize a list to store the N results
url_vector_list <- vector(mode = "list", length = N)
#counter/index of our list to fill
nm <- 1
#loop over the search page (meta) url vector, gathering all recipe urls from the search page
for (metaurl in meta_urls){
metascrape <- read_html(metaurl)
#store 20 recipe urls as the Nth item of the list
url_vector_list[[nm]] <- metascrape %>%
html_nodes(".fixed-recipe-card__h3") %>%
html_nodes("a") %>% html_attr("href") %>% trimws()
#increase index
nm <- nm + 1
#sleep for a period
Sys.sleep(4)
}
#unlist the N 20-string long vectors and combine into a 20*N size vector of urls to relevant recipes
url_vector <- unlist(url_vector_list)
return(url_vector)
}
#Sample usage:
cookieURLS <- relevant_url_finder(c("chocolate","chip","cookies"), N = 5)
#combine titles and urls in a dataframe:
title_and_url <- data.frame(title = relevant_titles,
url = relevant_urls)
#View first rows
head(title_and_url)
cookieURLS
cookie_urls <- relevant_url_finder(c("chocolate","chip","cookies"), N = 2)
head(cookie_urls)
#Return ingredients list, given a single recipe url
get_ingredients_from_url <- function(given_url){
scraping_recipe <- read_html(given_url)
recipe_data <- scraping_recipe %>%
html_nodes('.ingredients-item') %>%
html_text() %>% trimws()
return(recipe_data)
}
ingredients <- list() #initialize list
i <- 1     #index/counter
#For cookies in the list of urls, store the ingredients in list
for (urls in cookie_urls){
ingredients[[i]] <- get_ingredients_from_url(cookie_urls[i])
i <- i+1
Sys.sleep(5)
}
ingredients <- list() #initialize list
i <- 1     #index/counter
#For cookies in the list of urls, store the ingredients in list
for (urls in cookie_urls){
ingredients[[i]] <- get_ingredients_from_url(cookie_urls[i])
i <- i+1
Sys.sleep(3)
}
size(ingredients)
dim(ingredients)
length(ingredients)
if (i % 3 = 2)(print("Hi"))
if (i % 3 = 2){print("Hi")}
if (i%3 = 2)print("Hi")
if (i%3 = 2)(print("Hi"))
i%3
i%%3
if (i%%3 = 2)(print("Hi"))
if (i%%3 == 2)(print("Hi"))
i
if (i%%3 == 2)(print("Hi"))
i%%3
i%%3==2
(i%%3==2)
if (TRUE)(print("Hi"))
if (TRUE){print("Hi")}
if (i%%3==2){print("Hi")}
ingredients[[1]]
kable(ingredients[[1]])
kable(ingredients[[12]])
kable(cookie_urls)
head(cookie_urls)
#View first rows
kable(title_and_url)
#View first rows
kable(head(title_and_url))
knitr::kable(cookie_urls)
setwd("C:/Users/nickp/Documents/WordpressR")
library(RWordPress)
#publish your work
knit2wp('RecipeParser.Rmd',
title = 'Test Basic Recipe Parser',
publish = F,
categories = 'Data Projects')
#log into your wordpress account
options(WordpressLogin = c(lillegubbe = 'Pachelbel3'),
WordpressURL = 'https://nmimms.com/xmlrpc.php')
#publish your work
knit2wp('RecipeParser.Rmd',
title = 'Test Basic Recipe Parser',
publish = F,
categories = 'Data Projects')
setwd("C:/Users/nickp/Documents/WordpressR")
#publish your work
knit2wp('RecipeParser.Rmd',
title = 'Test Basic Recipe Parser',
publish = F,
categories = 'Data Projects')
knitr::kable(ingredients[[12]])
#Sample usage:
cookie_urls <- relevant_url_finder(c("chocolate","chip","cookies"), N = 5)
ingredients <- list() #initialize list
i <- 1     #index/counter
#For cookies in the list of urls, store the ingredients in list
for (urls in cookie_urls){
ingredients[[i]] <- get_ingredients_from_url(cookie_urls[i])
i <- i+1
Sys.sleep(2)
}
class(ingredients[[1]])
knitr::opts_chunk$set(echo = TRUE)
#takes as input list of N dataframes of ingredients, and a single ingredient to search for;
#returns N-length vector of (first match) given ingredient to search for
single_ingredient <- function(dataframe_list, single_ingredient){
single_ingredient %<>% as.character()
ingred <- vector(mode="character", length=length(dataframe_list))
for (i in 1:length(dataframe_list)){
z <- dataframe_list[[i]]
bs <- z[grepl(single_ingredient, z)]
ingred[i] <-  ifelse(identical(bs, character(0)), "missing",bs)
}
return(ingred)
}
z <- ingredients[[11]]
z
class(z)
#takes as input list of N dataframes of ingredients, and a single ingredient to search for;
#returns N-length vector of (first match) given ingredient to search for
single_ingredient <- function(dataframe_list, single_ingredient){
single_ingredient %<>% as.character()
ingred <- vector(mode="character", length=length(dataframe_list))
for (i in 1:length(dataframe_list)){
z <- dataframe_list[[i]]    #pick the recipe character list to search over
bs <- z[grepl(single_ingredient, z)]  #isolate the ingredient
ingred[i] <-  ifelse(identical(bs, character(0)), "missing",bs)
}
return(ingred)
}
egg_test <- egg = single_ingredient(ingredients, "egg")
egg_test <- single_ingredient(ingredients, "egg")
length(egg_test)
single_ingredient <- function(ingredientlist_list, single_ingredient){
single_ingredient %<>% as.character()
ingred <- vector(mode="character", length=length(ingredientlist_list))
for (i in 1:length(ingredientlist_list)){
z <- ingredientlist_list[[i]]    #pick the recipe character list to search over
bs <- z[grepl(single_ingredient, z)]  #isolate the ingredient -- but first match only!
ingred[i] <-  ifelse(identical(bs, character(0)), "missing",bs)
}
return(ingred)
}
egg_test <- single_ingredient(ingredients, "egg")
egg_test
grepl(egg_test, "egg")
grepl("egg",egg_test)
z <- egg_test[grepl("egg",egg_test)]
knitr::kable(egg_test[1:12])
z <- data.frame(brown_sugar = single_ingredient(ingredients, "brown sugar"),
white_sugar = single_ingredient(ingredients, "white sugar"),
egg = single_ingredient(ingredients, "egg"),
flour = single_ingredient(ingredients, "flour"))
z[] <- lapply(z, as.character)
z <- data.frame(brown_sugar = single_ingredient(ingredients, "brown sugar"),
white_sugar = single_ingredient(ingredients, "white sugar"),
egg = single_ingredient(ingredients, "egg"),
flour = single_ingredient(ingredients, "flour"))
z[] <- lapply(z, as.character)
knitr::kable(z[1:5,])
clean_unicode_fractions <- function(x){
x <- as.character(x)
x <- gsub("⅛", ".125", x)
x <- gsub("¼", ".25", x)
x <- gsub("½", ".5", x)
x <- gsub("¾", ".75", x)
x <- gsub("<U+2009>", "", x) #remove small unicode space
x <- gsub("\u2009", "", x) #remove small unicode space
x <- gsub("\u2153", ".333", x) #remove unicode 1/3
x <- gsub("\u2154", ".667", x) #remove unicode 2/3
x <- ifelse(startsWith(x, "."), paste0("0",x),x)
return(x)
}
z$w_sugar_amt <- z$white_sugar %>% clean_unicode_fractions() %>% str_extract("\\d+\\.*\\d*") %>% as.numeric()
z$b_sugar_amt <- z$brown_sugar %>% clean_unicode_fractions() %>% str_extract("\\d+\\.*\\d*") %>% as.numeric()
#view view few rows
knitr::kable(z[1:5,])
#Create columns that store value-only for amounts
z$w_sugar_amt <- z$white_sugar %>% clean_unicode_fractions() %>%
str_extract("\\d+\\.*\\d*") %>% as.numeric()
z$b_sugar_amt <- z$brown_sugar %>% clean_unicode_fractions() %>%
str_extract("\\d+\\.*\\d*") %>% as.numeric()
#view view few rows
knitr::kable(z[1:5,])
#view view few rows
knitr::kable(z[1:15,])
#Keep complete recipes:
zz <- filter(z, grepl("cup", brown_sugar)& grepl("cup", white_sugar))
clean_recipe_string <- function(x){
x <- as.character(x)
x <- x %>% clean_unicode_fractions() %>% str_replace_all("[:digit:]+", "")  %>% str_replace_all("[:punct:]+", "")%>% remove_units() %>% trimws()
return(x)
}
remove_units <- function(x){
x <- as.character(x)
units <- c("cups","cup")
x <- str_replace_all(x, paste0(units, collapse = "|"), "")
return(x)
}
zz$brown_string <-  str_extract(zz$brown_sugar, "[A-Z]+" )  #sub("^([[:alpha:]]*).*", "\\1", x)
zz$brown_string <-  zz$brown_sugar %>% clean_unicode_fractions() %>% str_replace_all("[:digit:]+", "")  %>% str_replace_all("[:punct:]+", "")%>% remove_units() %>% trimws()
zz$flour_string <- zz$flour %>% clean_recipe_string()
#get the most common ingredients among the list of dataframes (ingredients)
h <- ingredients[[1]]
h
fig <- plot_ly(type = 'scatter', mode = 'markers')
library(plotly)
fig <- plot_ly(type = 'scatter', mode = 'markers')
fig <- fig %>%
add_trace(
x = z$b_sugar_amt,
y = z$w_sugar_amt,
marker = list(color='green'),
hoverinfo = z$brown_sugar,
showlegend = F
)
fig <- fig %>%
layout(
title = "Sugar in Cookie recipes",
xaxis = list(zeroline = F),
yaxis = list(hoverformat = '.2f'))
fig
#Plots
ggplot(zz, aes(x=b_sugar_amt, y=w_sugar_amt)) +
geom_point(position = position_jitter(h= 0.03, w = 0.03), alpha = 0.3, size = 2) +
geom_abline(slope = 1) +
ggtitle("Brown vs. White Sugar in Choc. Chip Cookie Recipes") +
xlab("Brown Sugar (cups)") +
ylab("White Sugar (cups)")+
coord_fixed(ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE, clip = "on")
head(zz)
#Plots
ggplot(zz, aes(x=b_sugar_amt, y=w_sugar_amt)) +
geom_point(position = position_jitter(h= 0.02, w = 0.02), alpha = 0.3, size = 2) +
geom_abline(slope = 1) +
ggtitle("Brown vs. White Sugar in Choc. Chip Cookie Recipes") +
xlab("Brown Sugar (cups)") +
ylab("White Sugar (cups)")+
coord_fixed(ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE, clip = "on")
#Plots
ggplot(zz, aes(x=b_sugar_amt, y=w_sugar_amt)) +
geom_point(position = position_jitter(h= 0.025, w = 0.025), alpha = 0.3, size = 2) +
geom_abline(slope = 1) +
ggtitle("Brown vs. White Sugar in Choc. Chip Cookie Recipes") +
xlab("Brown Sugar (cups)") +
ylab("White Sugar (cups)")+
coord_fixed(ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE, clip = "on")
zz$sugar_ratio <- zz$b_sugar_amt / zz$w_sugar_amt
table(zz$sugar_ratio)
plot(zz$sugar_ratio)
barplot(zz$sugar_ratio)
plot(zz$sugar_ratio)
hist(zz$sugar_ratio)
View(table(zz$sugar_ratio))
hist(zz$sugar_ratio, n = 200)
hist(zz$sugar_ratio, n = 100)
hist(zz$sugar_ratio, n = 50)
hist(zz$sugar_ratio, n = 50, main ="y")
hist(zz$sugar_ratio, n = 50, main ="Sugar Ratio", xlab = "Ds")
hist(zz$sugar_ratio, n = 50, main ="Sugar Ratio", xlab = "Ratio of white:brown sugar")
hist(zz$sugar_ratio, n = 50, main ="Sugar Ratio", xlab = "Ratio of white:brown sugar")
